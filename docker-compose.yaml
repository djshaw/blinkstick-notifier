version: '3.7'

x-logging: &loki-logging
    driver: json-file
    options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

x-python-version: &python-version
    PYTHON_VERSION: 3.12

services:
    led-controller:
        volumes:
            - "/dev/bus/usb:/dev/bus/usb:rw"
            - "./secrets/ledController/config.yml:/app/config.yml:ro"
        privileged: true
        env_file:
            - .docker-compose.env
        build:
            context: .
            dockerfile: ledController/src/Dockerfile
            args:
                *python-version
        restart: unless-stopped
        ports:
            - "5678:5678" # Python debug port
        healthcheck:
            interval: 10s
            timeout: 20s
            retries: 3
        logging: *loki-logging


    calendar-listener:
        volumes:
            - "calendarApiTokens:/tokens/:rw"
            - "./secrets/calendarListener/config.yml:/app/config.yml:ro"
            - "./secrets/calendarListener/credentials.json:/app/credentials.json:ro"
        env_file:
            - .docker-compose.env
        ports:
            - "5679:5678" # Python debug port
        build:
            context: .
            dockerfile: calendarListener/src/Dockerfile
            args:
                *python-version
        restart: unless-stopped
        logging: *loki-logging


    bitbucket-listener:
        build:
            context: .
            dockerfile: bitbucket/src/Dockerfile
            args:
                *python-version
        volumes:
            - "./secrets/bitbucket.yaml:/app/config.yml:ro"
        env_file:
            - .docker-compose.env
        ports:
            - "5680:5678" # Python debug port
        depends_on:
            - mongo
        restart: unless-stopped
        logging: *loki-logging


    outlook-listener:
        volumes:
            - "outlookApiTokens:/tokens:rw"
            - "./secrets/outlookListener/config.yml:/app/config.yml:ro"
            - "./secrets/outlookListener/credentials.yaml:/app/credentials.yaml:ro"
        env_file:
            - .docker-compose.env
        ports:
            - "5681:5678" # Python debug port
        build:
            context: .
            dockerfile: outlookListener/src/Dockerfile
            args:
                *python-version
        restart: unless-stopped
        logging: *loki-logging


    webhook-listener:
        build:
            context: .
            dockerfile: webhook/src/Dockerfile
            args:
                *python-version
        restart: unless-stopped
        volumes:
            - "./secrets/webhook/config.yml:/app/config.yml:ro"
        env_file:
            - .docker-compose.env
        ports:
            - "5682:5678" # Python debug port
        healthcheck:
            interval: 3s
            test: ["CMD", "curl", "http://localhost:8080/health"]
        logging: *loki-logging


    mongo:
        image: mongo


    mongo-express:
        image: mongo-express
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: ""
            ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
        ports:
            - 8081:8081
        depends_on:
            - mongo


    nginx:
        image: nginx
        volumes:
            # Exposed so that manualSet.html can get a list of alerts
            - "./secrets/ledController/config.yml:/usr/share/nginx/html/config.yml:ro"

            - "./nginx/js-yaml.js:/usr/share/nginx/html/js-yaml.js:ro"
            - "./nginx/manualSet.html:/usr/share/nginx/html/manualSet.html:ro"
            - "./nginx/nginx-selfsigned.crt:/etc/nginx/nginx-selfsigned.crt:ro"
            - "./nginx/nginx-selfsigned.key:/etc/nginx/nginx-selfsigned.key:ro"
            - "./nginx/templates:/etc/nginx/templates:ro"
        ports:
            - 8080:8080
            - 8443:8443
        restart: unless-stopped
        depends_on:
            - bitbucket-listener
            - calendar-listener
            - led-controller
            - outlook-listener
            - webhook-listener
        logging: *loki-logging


    alertmanager:
        image: prom/alertmanager
        ports:
          - "9093:9093"
        volumes:
          - "./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro"
        command: ["--log.level=debug", "--config.file=/etc/alertmanager/alertmanager.yml"]
        logging: *loki-logging


    prometheus:
        image: prom/prometheus
        ports:
          - "9090:9090"
        volumes:
          - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
          - "./prometheus/rules.yml:/etc/prometheus/rules.yml:ro"
          - "prometheus-data:/prometheus:rw"
        command: ["--log.level=debug", "--config.file=/etc/prometheus/prometheus.yml"]
        restart: unless-stopped
        logging: *loki-logging


    # install the loki docker log driver with:
    #   docker plugin install grafana/loki-docker-driver:2.9.1 --alias loki --grant-all-permissions
    loki:
        image: grafana/loki
        ports:
          - "3100:3100"
        restart: unless-stopped
        volumes:
          - "loki-data:/loki:rw"
          - "./loki/local-config.yaml:/etc/loki/local-config.yaml"
        logging: *loki-logging


    promtail:
        image: grafana/promtail:2.3.0
        volumes:
          - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
          - "./promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro"
        command: -config.file=/etc/promtail/promtail-config.yaml
        restart: unless-stopped
        ports:
          - "9080:9080"
        logging: *loki-logging


    grafana:
        image: grafana/grafana
        ports:
          - "3000:3000"
        restart: unless-stopped
        volumes:
          - grafana-data:/var/lib/grafana:rw
        logging: *loki-logging


    cadvisor:
      image: gcr.io/cadvisor/cadvisor
      restart: unless-stopped
      privileged: true
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys/fs/cgroup:/sys/fs/cgroup:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /var/run/docker.sock:/var/run/docker.sock:rw
        - /dev/disk/:/dev/disk/:ro
      ports:
        - "7080:8080"
      command:
        - "/cadvisor"
        - "--enable_load_reader=true"
        - "-logtostderr"
      # cadvisor healthcheck url /healthz
      logging: *loki-logging


volumes:
    calendarApiTokens:
    outlookApiTokens:
    grafana-data:
    loki-data:
    prometheus-data:
